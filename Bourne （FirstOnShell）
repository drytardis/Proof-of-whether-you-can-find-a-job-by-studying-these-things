#Learning of Shell【chapter10 认识与学习shell】
【参考网址：https://shouce.jb51.net/vbird-linux-basic-4/88.html】
【可搜索“范例”，作为题目来进行自我验证】


##认识bash这个shell

###引用定义
“但是我们总是需要让使用者操作系统的，所以就有了在操作系统上面发展的应用程序啦！使用者可以通过应用程序来指挥核心， 让核心达成我们所需要的硬件任务！如果考虑如第零章所提供的操作系统图示（图0.4.2）， 我们可以发现应用程序其实是在最外层，就如同鸡蛋的外壳一样，因此这个咚咚也就被称呼为壳程序 （shell） 啰！”
通过shell（命令行界面）操作应用程序调用核心运行所需要的工作。

只要能够操作应用程序的接口都能够称为壳程序。（此处应有meme：只要能够操作应用程序的接口都能够称为壳程序；狭义的壳程序：命令行方面的软件；广义的壳程序：图形接口的软件）。

在/etc/shell文件中可以查看到当前系统所使用的shell，其存在意义在于，提供给，系统某些服务在运行时会去检查所使用的shell，一个参考的文件。

###引用奇奇怪怪的shell事实参考
“举例来说，某些 FTP 网站会去检查使用者的可用 shell ，而如果你不想要让这些使用者使用 FTP 以外的主机资源时，可能会给予该使用者一些怪怪的 shell，让使用者无法以其他服务登陆主机。 这个时候，你就得将那些怪怪的 shell 写到 /etc/shells 当中了。举例来说，我们的 CentOS 7.x 的 /etc/shells 里头就有个 /sbin/nologin 文件的存在，这个就是我们说的怪怪的 shell 啰～”

使用者在进行登录系统的动作时，就会被给与一个shell用于工作，指定该shell的文件为/etc/passwd举例其中的某行内容为：“nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin”

默认shell为bash。是默认的理由：具有命令修编能力（history）；具有命令与文件补全功能（tab）；具有别名设置功能（alias）；具有工作/背景前景控制功能（job control, foreground, background）；能够程序化脚本（shell scripts）；万用字符（wild card）。
bash本身具有内置指令，可使用type [-tpa] name确认，得到buildin，即为内部指令。

下达指令，指令过长可以使用“\”“enter键”一起跳脱换行，然后继续输入命令。
[一键删除]从光标处向前删除指令串 （[ctrl]+u） 及向后删除指令串 （[ctrl]+k）。

##shell的变量功能
使用echo来取用变量，变量在被取用时，前面要加上$符号。可以用echo ${变量}的方式取用值。
变量的设置规则：变量与变量内容以一个=来连接；=两边不能直接接空白字符；变量名称只能是英文字母与数字，但开头字符不能是数字；变量内容中若存在空白字符可以使用“”或者‘’将变量内容结合起来，如果使用“”，其中存在的特殊字符将保持原有特性，如果使用‘’，其中存在的特殊字符将变为一般字符；可使用\将特殊符号变为一般字符；在执行一串指令时，如果需要借助其他额外指令提供的信息，可以使用反单引号 `指令` 或 `$(指令)`。特别注意，反单引号是键盘上数字键 1 左边的那个按键，而不是单引号！例如，要获取核心版本的设置，可以使用 `version=$(uname -r)`，然后再用 `echo $version` 来输出结果，如 `3.10.0-229.el7.x86_64`；若该变量为扩增变量内容时，则可用 "$变量名称" 或 ${变量} 累加内容，如下所示： “PATH="$PATH":/home/bin”或“PATH=${PATH}:/home/bin”；若该变量需要在其他子程序执行，则需要以 export 来使变量变成环境变量： “export PATH”；通常大写字符为系统默认变量，自行设置变量可以使用小写字符，方便判断 （纯粹依照使用者兴趣与嗜好） ；取消变量的方法为使用 unset ：“unset 变量名称”例如取消 myname 的设置： “unset myname”；
